type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMI
  | COLON
  | GET
  | COMMA
  | ASSIGN
  | AT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PERCENT
  | EXP
  | MOD
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | BREAK
  | CONTINUE
  | ELIF
  | ELSE
  | FOR
  | FUNCTION
  | RETURN
  | WHILE
  | IF
  | INT
  | VOID
  | BOOL
  | CHAR
  | STRING
  | PRINT
  | GOTO
  | LIST
  | CHOOSE
  | MAIN
  | NODE
  | READINT
  | READSTR
  | ROLL
  | EOF
  | INT_LIT of (int)
  | BOOL_LIT of (bool)
  | STR_LIT of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACKET *);
  262 (* RBRACKET *);
  263 (* SEMI *);
  264 (* COLON *);
  265 (* GET *);
  266 (* COMMA *);
  267 (* ASSIGN *);
  268 (* AT *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* PERCENT *);
  274 (* EXP *);
  275 (* MOD *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* NOT *);
  283 (* AND *);
  284 (* OR *);
  285 (* BREAK *);
  286 (* CONTINUE *);
  287 (* ELIF *);
  288 (* ELSE *);
  289 (* FOR *);
  290 (* FUNCTION *);
  291 (* RETURN *);
  292 (* WHILE *);
  293 (* IF *);
  294 (* INT *);
  295 (* VOID *);
  296 (* BOOL *);
  297 (* CHAR *);
  298 (* STRING *);
  299 (* PRINT *);
  300 (* GOTO *);
  301 (* LIST *);
  302 (* CHOOSE *);
  303 (* MAIN *);
  304 (* NODE *);
  305 (* READINT *);
  306 (* READSTR *);
  307 (* ROLL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  308 (* INT_LIT *);
  309 (* BOOL_LIT *);
  310 (* STR_LIT *);
  311 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\003\000\004\000\004\000\002\000\
\005\000\005\000\005\000\005\000\006\000\006\000\009\000\009\000\
\007\000\007\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\011\000\011\000\012\000\012\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\002\000\009\000\005\000\004\000\005\000\
\001\000\001\000\001\000\001\000\000\000\001\000\002\000\004\000\
\000\000\002\000\002\000\005\000\005\000\005\000\005\000\007\000\
\011\000\007\000\003\000\005\000\005\000\005\000\001\000\001\000\
\001\000\001\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\009\000\012\000\010\000\011\000\000\000\
\000\000\002\000\003\000\004\000\000\000\017\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\032\000\033\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\008\000\051\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\017\000\000\000\
\017\000\017\000\020\000\023\000\021\000\000\000\022\000\028\000\
\029\000\030\000\000\000\016\000\000\000\000\000\005\000\026\000\
\000\000\000\000\017\000\000\000\025\000"

let yydgoto = "\002\000\
\003\000\010\000\011\000\012\000\013\000\074\000\018\000\039\000\
\075\000\040\000\084\000\085\000"

let yysindex = "\009\000\
\000\000\000\000\101\255\000\000\000\000\000\000\000\000\022\255\
\020\255\000\000\000\000\000\000\019\255\000\000\085\255\046\255\
\083\255\061\255\000\000\108\255\037\255\037\255\000\000\037\255\
\037\255\121\255\122\255\128\255\129\255\137\255\143\255\146\255\
\149\255\150\255\000\000\000\000\000\000\055\255\114\001\000\000\
\082\255\240\254\133\001\092\000\168\001\152\001\037\255\037\255\
\037\255\037\255\037\255\037\255\037\255\037\255\037\255\037\255\
\037\255\000\000\037\255\037\255\037\255\037\255\037\255\037\255\
\037\255\037\255\037\255\037\255\037\255\037\255\037\255\000\000\
\097\255\151\255\144\255\000\000\000\000\000\000\108\000\124\000\
\140\000\156\000\249\254\156\255\152\255\157\255\172\000\188\000\
\204\000\158\255\249\254\039\255\039\255\142\255\142\255\000\000\
\192\255\192\255\192\255\192\255\192\255\192\255\168\001\168\001\
\000\000\165\255\240\254\177\255\180\255\174\255\181\255\182\255\
\037\255\190\255\191\255\194\255\195\255\000\000\000\000\154\255\
\000\000\000\000\000\000\000\000\000\000\249\254\000\000\000\000\
\000\000\000\000\120\255\000\000\141\255\178\255\000\000\000\000\
\167\255\207\255\000\000\199\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\216\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\255\000\000\000\000\
\000\000\216\255\000\000\000\000\210\255\000\000\000\000\000\000\
\000\000\000\000\224\255\224\255\000\000\000\000\000\000\224\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\238\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\255\000\000\239\255\000\000\000\000\000\000\
\000\000\000\000\050\255\228\000\252\000\052\000\076\000\000\000\
\005\001\029\001\038\001\062\001\071\001\095\001\255\255\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\254\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\217\255\000\000\237\255\236\255\
\000\000\000\000\043\000\000\000"

let yytablesize = 705
let yytable = "\041\000\
\043\000\044\000\073\000\045\000\046\000\059\000\060\000\061\000\
\062\000\001\000\054\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\054\000\070\000\071\000\004\000\005\000\006\000\
\014\000\007\000\079\000\080\000\081\000\082\000\083\000\083\000\
\087\000\088\000\089\000\083\000\091\000\022\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\049\000\016\000\061\000\062\000\056\000\
\049\000\063\000\034\000\049\000\055\000\022\000\024\000\034\000\
\023\000\057\000\034\000\120\000\055\000\034\000\034\000\034\000\
\034\000\017\000\015\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\022\000\034\000\034\000\072\000\024\000\019\000\
\035\000\036\000\037\000\038\000\126\000\021\000\086\000\025\000\
\026\000\027\000\090\000\131\000\020\000\133\000\134\000\028\000\
\029\000\030\000\031\000\024\000\042\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\025\000\026\000\027\000\140\000\
\022\000\047\000\048\000\135\000\028\000\029\000\030\000\031\000\
\049\000\050\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\051\000\004\000\005\000\006\000\022\000\007\000\052\000\
\136\000\024\000\053\000\008\000\009\000\054\000\055\000\105\000\
\106\000\107\000\025\000\026\000\027\000\112\000\114\000\118\000\
\063\000\113\000\028\000\029\000\030\000\031\000\024\000\119\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\025\000\
\026\000\027\000\022\000\121\000\123\000\137\000\122\000\028\000\
\029\000\030\000\031\000\124\000\125\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\127\000\128\000\138\000\022\000\
\129\000\130\000\141\000\024\000\059\000\060\000\061\000\062\000\
\132\000\139\000\063\000\035\000\025\000\026\000\027\000\056\000\
\035\000\013\000\000\000\035\000\028\000\029\000\030\000\031\000\
\024\000\052\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\025\000\026\000\027\000\035\000\035\000\000\000\014\000\
\053\000\028\000\029\000\030\000\031\000\000\000\000\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\024\000\000\000\
\047\000\024\000\048\000\000\000\000\000\047\000\000\000\048\000\
\047\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\047\000\047\000\048\000\048\000\000\000\000\000\000\000\
\024\000\024\000\024\000\000\000\000\000\000\000\000\000\000\000\
\024\000\024\000\024\000\024\000\000\000\000\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\038\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\038\000\000\000\000\000\
\038\000\038\000\038\000\038\000\000\000\000\000\000\000\038\000\
\038\000\038\000\038\000\038\000\038\000\039\000\038\000\038\000\
\000\000\000\000\039\000\000\000\000\000\039\000\000\000\000\000\
\039\000\039\000\039\000\039\000\000\000\077\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\039\000\039\000\
\059\000\060\000\061\000\062\000\000\000\108\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\109\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\110\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\111\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\115\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\116\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\117\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\000\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\036\000\070\000\071\000\
\000\000\000\000\036\000\000\000\000\000\036\000\000\000\000\000\
\036\000\036\000\000\000\000\000\000\000\000\000\000\000\036\000\
\036\000\036\000\036\000\036\000\036\000\037\000\036\000\036\000\
\000\000\000\000\037\000\000\000\000\000\037\000\041\000\000\000\
\037\000\037\000\000\000\041\000\000\000\000\000\041\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\037\000\037\000\
\041\000\041\000\041\000\041\000\041\000\041\000\042\000\041\000\
\041\000\000\000\000\000\042\000\000\000\000\000\042\000\043\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\043\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\042\000\043\000\043\000\043\000\043\000\043\000\043\000\044\000\
\043\000\043\000\000\000\000\000\044\000\000\000\000\000\044\000\
\045\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
\045\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\044\000\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
\046\000\045\000\045\000\000\000\000\000\046\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\058\000\046\000\046\000\000\000\000\000\000\000\059\000\060\000\
\061\000\062\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\076\000\070\000\071\000\000\000\000\000\
\000\000\059\000\060\000\061\000\062\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\078\000\070\000\
\071\000\000\000\000\000\000\000\059\000\060\000\061\000\062\000\
\000\000\000\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\000\000\070\000\071\000\059\000\060\000\061\000\062\000\
\000\000\000\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000"

let yycheck = "\019\000\
\021\000\022\000\042\000\024\000\025\000\013\001\014\001\015\001\
\016\001\001\000\002\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\010\001\027\001\028\001\038\001\039\001\040\001\
\003\001\042\001\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\001\001\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\002\001\034\001\015\001\016\001\001\001\
\007\001\019\001\002\001\010\001\002\001\001\001\026\001\007\001\
\004\001\011\001\010\001\107\000\010\001\013\001\014\001\015\001\
\016\001\055\001\055\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\001\001\027\001\028\001\004\001\026\001\003\001\
\052\001\053\001\054\001\055\001\113\000\011\001\052\000\035\001\
\036\001\037\001\056\000\119\000\055\001\121\000\122\000\043\001\
\044\001\045\001\046\001\026\001\001\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\035\001\036\001\037\001\139\000\
\001\001\001\001\001\001\004\001\043\001\044\001\045\001\046\001\
\001\001\001\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\001\001\038\001\039\001\040\001\001\001\042\001\001\001\
\004\001\026\001\001\001\047\001\048\001\001\001\001\001\055\001\
\002\001\010\001\035\001\036\001\037\001\002\001\002\001\002\001\
\019\001\010\001\043\001\044\001\045\001\046\001\026\001\003\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\035\001\
\036\001\037\001\001\001\003\001\007\001\004\001\003\001\043\001\
\044\001\045\001\046\001\007\001\007\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\007\001\007\001\032\001\001\001\
\007\001\007\001\004\001\026\001\013\001\014\001\015\001\016\001\
\055\001\003\001\019\001\002\001\035\001\036\001\037\001\000\000\
\007\001\002\001\255\255\010\001\043\001\044\001\045\001\046\001\
\026\001\002\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\035\001\036\001\037\001\027\001\028\001\255\255\002\001\
\002\001\043\001\044\001\045\001\046\001\255\255\255\255\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\001\001\255\255\
\002\001\004\001\002\001\255\255\255\255\007\001\255\255\007\001\
\010\001\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\027\001\028\001\027\001\028\001\255\255\255\255\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\002\001\255\255\255\255\
\255\255\255\255\007\001\255\255\255\255\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\027\001\028\001\
\255\255\255\255\007\001\255\255\255\255\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\255\255\002\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\002\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\027\001\028\001\
\255\255\255\255\007\001\255\255\255\255\010\001\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\027\001\028\001\
\255\255\255\255\007\001\255\255\255\255\010\001\002\001\255\255\
\013\001\014\001\255\255\007\001\255\255\255\255\010\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\020\001\021\001\022\001\023\001\024\001\025\001\002\001\027\001\
\028\001\255\255\255\255\007\001\255\255\255\255\010\001\002\001\
\255\255\255\255\255\255\255\255\007\001\255\255\255\255\010\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\020\001\021\001\022\001\023\001\024\001\025\001\002\001\
\027\001\028\001\255\255\255\255\007\001\255\255\255\255\010\001\
\002\001\255\255\255\255\255\255\255\255\007\001\255\255\255\255\
\010\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\020\001\021\001\022\001\023\001\024\001\025\001\
\002\001\027\001\028\001\255\255\255\255\007\001\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\007\001\027\001\028\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\007\001\027\001\028\001\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\007\001\027\001\
\028\001\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMI\000\
  COLON\000\
  GET\000\
  COMMA\000\
  ASSIGN\000\
  AT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PERCENT\000\
  EXP\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  BREAK\000\
  CONTINUE\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  FUNCTION\000\
  RETURN\000\
  WHILE\000\
  IF\000\
  INT\000\
  VOID\000\
  BOOL\000\
  CHAR\000\
  STRING\000\
  PRINT\000\
  GOTO\000\
  LIST\000\
  CHOOSE\000\
  MAIN\000\
  NODE\000\
  READINT\000\
  READSTR\000\
  ROLL\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LIT\000\
  BOOL_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
               ( [], [], [] )
# 464 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 34 "parser.mly"
                ( let (var, func, node) = _1 in _2::var, func, node )
# 472 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 35 "parser.mly"
                ( let (var, func, node) = _1 in var, _2::func, node )
# 480 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ndecl) in
    Obj.repr(
# 36 "parser.mly"
                ( let (var, func, node) = _1 in var, func, _2::node )
# 488 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'mytypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'params_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 40 "parser.mly"
 ({
    ftype = _1;
		fname = _3;
		params = _5;
		body = List.rev _8
		})
# 503 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
  ({
    nname = _2;
    body = List.rev _4
    })
# 514 "parser.ml"
               : 'ndecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 53 "parser.mly"
                                ({
    nname = "main";
    body = List.rev _3
    })
# 524 "parser.ml"
               : 'ndecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mytypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                              ({ vtype = _1;
          vname = _2;
          vexpr = _4 })
# 535 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
      (Int)
# 541 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         (Bool)
# 547 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
           (String)
# 553 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
         (Void)
# 559 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                    ( [] )
# 565 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 72 "parser.mly"
                   ( List.rev _1 )
# 572 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mytypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                                 ( [Param(_1, _2)])
# 580 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mytypes) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                                  ( Param(_3,_4)::_1 )
# 589 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                     ( [] )
# 595 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                    ( _2 :: _1 )
# 603 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
            (Expr(_1))
# 610 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                 ( Print(_3) )
# 617 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_opt) in
    Obj.repr(
# 86 "parser.mly"
                                       ( List(_3) )
# 624 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_opt) in
    Obj.repr(
# 87 "parser.mly"
                                         ( Choose(_3) )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                 ( Goto(_3) )
# 638 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "parser.mly"
                                                  ( If(_3, _6, []))
# 646 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 90 "parser.mly"
                                                                              ( If(_3, _6, _10))
# 655 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
                                                    ( While(_3, _6) )
# 663 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                    ( Return(_2) )
# 670 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                    ( ReadInt (_3))
# 677 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                    ( ReadStr (_3))
# 684 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                 ( Roll (_3) )
# 691 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 98 "parser.mly"
                    ( Int_Lit(_1) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 99 "parser.mly"
                       ( Bool_Lit(_1) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
                    ( String_Lit(_1) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                      ( Id(_1) )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                  ( Uniop(Not, _2) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                      ( Binop(_1, Add,   _3) )
# 734 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                      ( Binop(_1, Sub,   _3) )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                      ( Binop(_1, Mult,  _3) )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                      ( Binop(_1, Div,   _3) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                      ( Binop(_1, Mod,   _3) )
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                      ( Binop(_1, Equal, _3) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                      ( Binop(_1, Neq,   _3) )
# 782 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                      ( Binop(_1, Less,  _3) )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                      ( Binop(_1, Leq,   _3) )
# 798 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                      ( Binop(_1, Greater,  _3) )
# 806 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                      ( Binop(_1, Geq,   _3) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( Binop(_1, And,   _3) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                      ( Binop(_1, Or,   _3) )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                      ( Assign(_1, _3) )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 117 "parser.mly"
                                  ( Call(_1, _3) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                        ( _2 )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                  ( [] )
# 859 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 122 "parser.mly"
                   ( List.rev _1 )
# 866 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
         ( [_1] )
# 873 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                              ( _3 :: _1 )
# 881 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
