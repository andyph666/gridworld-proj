type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMI
  | COLON
  | GET
  | COMMA
  | ASSIGN
  | AT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PERCENT
  | EXP
  | MOD
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | BREAK
  | CONTINUE
  | ELIF
  | ELSE
  | FOR
  | FUNCTION
  | RETURN
  | WHILE
  | IF
  | INT
  | VOID
  | BOOL
  | CHAR
  | STRING
  | PRINT
  | GOTO
  | LIST
  | CHOOSE
  | MAIN
  | NODE
  | EOF
  | INT_LIT of (int)
  | BOOL_LIT of (bool)
  | STR_LIT of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 61 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACKET *);
  262 (* RBRACKET *);
  263 (* SEMI *);
  264 (* COLON *);
  265 (* GET *);
  266 (* COMMA *);
  267 (* ASSIGN *);
  268 (* AT *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* PERCENT *);
  274 (* EXP *);
  275 (* MOD *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* NOT *);
  283 (* AND *);
  284 (* OR *);
  285 (* BREAK *);
  286 (* CONTINUE *);
  287 (* ELIF *);
  288 (* ELSE *);
  289 (* FOR *);
  290 (* FUNCTION *);
  291 (* RETURN *);
  292 (* WHILE *);
  293 (* IF *);
  294 (* INT *);
  295 (* VOID *);
  296 (* BOOL *);
  297 (* CHAR *);
  298 (* STRING *);
  299 (* PRINT *);
  300 (* GOTO *);
  301 (* LIST *);
  302 (* CHOOSE *);
  303 (* MAIN *);
  304 (* NODE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  305 (* INT_LIT *);
  306 (* BOOL_LIT *);
  307 (* STR_LIT *);
  308 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\003\000\004\000\004\000\002\000\
\005\000\005\000\005\000\005\000\006\000\006\000\009\000\009\000\
\007\000\007\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\011\000\011\000\012\000\012\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\002\000\009\000\005\000\004\000\005\000\
\001\000\001\000\001\000\001\000\000\000\001\000\002\000\004\000\
\000\000\002\000\002\000\005\000\005\000\005\000\005\000\007\000\
\011\000\007\000\003\000\001\000\001\000\001\000\001\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\009\000\012\000\010\000\011\000\000\000\
\000\000\002\000\003\000\004\000\000\000\017\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\029\000\030\000\000\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\008\000\048\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\017\000\000\000\017\000\017\000\020\000\023\000\
\021\000\000\000\022\000\000\000\016\000\000\000\000\000\005\000\
\026\000\000\000\000\000\017\000\000\000\025\000"

let yydgoto = "\002\000\
\003\000\010\000\011\000\012\000\013\000\068\000\018\000\036\000\
\069\000\037\000\078\000\079\000"

let yysindex = "\005\000\
\000\000\000\000\021\255\000\000\000\000\000\000\000\000\009\255\
\000\255\000\000\000\000\000\000\012\255\000\000\068\255\029\255\
\072\255\050\255\000\000\088\255\006\255\006\255\000\000\006\255\
\006\255\091\255\097\255\109\255\110\255\117\255\118\255\000\000\
\000\000\000\000\066\255\052\001\000\000\071\255\040\255\071\001\
\078\000\106\001\090\001\006\255\006\255\006\255\006\255\006\255\
\006\255\006\255\006\255\000\000\006\255\006\255\006\255\006\255\
\006\255\006\255\006\255\006\255\006\255\006\255\006\255\006\255\
\006\255\000\000\061\255\123\255\116\255\000\000\000\000\000\000\
\094\000\110\000\126\000\142\000\251\254\133\255\126\255\135\255\
\136\255\251\254\112\255\112\255\120\255\120\255\000\000\034\255\
\034\255\034\255\034\255\034\255\034\255\106\001\106\001\000\000\
\137\255\040\255\138\255\139\255\140\255\141\255\149\255\006\255\
\154\255\000\000\000\000\094\255\000\000\000\000\000\000\000\000\
\000\000\251\254\000\000\108\255\000\000\129\255\166\255\000\000\
\000\000\130\255\160\255\000\000\187\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\168\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\167\255\000\000\
\000\000\122\255\000\000\000\000\000\000\000\000\000\000\169\255\
\169\255\169\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\174\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\255\000\000\175\255\000\000\
\000\000\063\255\166\000\190\000\038\000\062\000\000\000\199\000\
\223\000\232\000\000\001\009\001\033\001\180\255\219\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\224\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\220\255\000\000\237\255\236\255\
\000\000\000\000\054\000\000\000"

let yytablesize = 643
let yytable = "\038\000\
\040\000\041\000\067\000\042\000\043\000\001\000\022\000\053\000\
\054\000\055\000\056\000\014\000\051\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\051\000\064\000\065\000\073\000\
\074\000\075\000\076\000\077\000\077\000\077\000\082\000\024\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\016\000\053\000\054\000\
\055\000\056\000\022\000\015\000\057\000\023\000\032\000\033\000\
\034\000\035\000\004\000\005\000\006\000\108\000\007\000\017\000\
\046\000\052\000\050\000\008\000\009\000\046\000\019\000\022\000\
\046\000\052\000\066\000\024\000\051\000\004\000\005\000\006\000\
\020\000\007\000\021\000\114\000\025\000\026\000\027\000\116\000\
\039\000\118\000\119\000\044\000\028\000\029\000\030\000\031\000\
\024\000\045\000\032\000\033\000\034\000\035\000\080\000\081\000\
\125\000\025\000\026\000\027\000\022\000\046\000\047\000\120\000\
\096\000\028\000\029\000\030\000\031\000\048\000\049\000\032\000\
\033\000\034\000\035\000\032\000\097\000\098\000\055\000\056\000\
\032\000\022\000\057\000\032\000\121\000\024\000\103\000\104\000\
\105\000\106\000\057\000\107\000\109\000\110\000\025\000\026\000\
\027\000\117\000\111\000\112\000\032\000\032\000\028\000\029\000\
\030\000\031\000\024\000\113\000\032\000\033\000\034\000\035\000\
\115\000\123\000\124\000\025\000\026\000\027\000\022\000\053\000\
\013\000\122\000\049\000\028\000\029\000\030\000\031\000\014\000\
\050\000\032\000\033\000\034\000\035\000\044\000\000\000\000\000\
\000\000\000\000\044\000\022\000\000\000\044\000\126\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\026\000\027\000\000\000\000\000\000\000\044\000\044\000\
\028\000\029\000\030\000\031\000\024\000\000\000\032\000\033\000\
\034\000\035\000\000\000\000\000\045\000\025\000\026\000\027\000\
\024\000\045\000\000\000\024\000\045\000\028\000\029\000\030\000\
\031\000\000\000\000\000\032\000\033\000\034\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\024\000\024\000\000\000\000\000\000\000\
\000\000\000\000\024\000\024\000\024\000\024\000\000\000\031\000\
\024\000\024\000\024\000\024\000\031\000\000\000\000\000\031\000\
\000\000\000\000\031\000\031\000\031\000\031\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\035\000\
\031\000\031\000\000\000\000\000\035\000\000\000\000\000\035\000\
\000\000\000\000\035\000\035\000\035\000\035\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\036\000\
\035\000\035\000\000\000\000\000\036\000\000\000\000\000\036\000\
\000\000\000\000\036\000\036\000\036\000\036\000\000\000\071\000\
\000\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\036\000\036\000\053\000\054\000\055\000\056\000\000\000\099\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\064\000\065\000\053\000\054\000\055\000\056\000\000\000\100\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\064\000\065\000\053\000\054\000\055\000\056\000\000\000\101\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\064\000\065\000\053\000\054\000\055\000\056\000\000\000\102\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\064\000\065\000\053\000\054\000\055\000\056\000\000\000\000\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\033\000\
\064\000\065\000\000\000\000\000\033\000\000\000\000\000\033\000\
\000\000\000\000\033\000\033\000\000\000\000\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
\033\000\033\000\000\000\000\000\034\000\000\000\000\000\034\000\
\038\000\000\000\034\000\034\000\000\000\038\000\000\000\000\000\
\038\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
\034\000\034\000\038\000\038\000\038\000\038\000\038\000\038\000\
\039\000\038\000\038\000\000\000\000\000\039\000\000\000\000\000\
\039\000\040\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\040\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\039\000\039\000\040\000\040\000\040\000\040\000\040\000\
\040\000\041\000\040\000\040\000\000\000\000\000\041\000\000\000\
\000\000\041\000\042\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\042\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\041\000\041\000\042\000\042\000\042\000\042\000\
\042\000\042\000\043\000\042\000\042\000\000\000\000\000\043\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\043\000\043\000\043\000\
\043\000\043\000\052\000\043\000\043\000\000\000\000\000\000\000\
\053\000\054\000\055\000\056\000\000\000\000\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\070\000\064\000\065\000\
\000\000\000\000\000\000\053\000\054\000\055\000\056\000\000\000\
\000\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\072\000\064\000\065\000\000\000\000\000\000\000\053\000\054\000\
\055\000\056\000\000\000\000\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\000\000\064\000\065\000\053\000\054\000\
\055\000\056\000\000\000\000\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000"

let yycheck = "\019\000\
\021\000\022\000\039\000\024\000\025\000\001\000\001\001\013\001\
\014\001\015\001\016\001\003\001\002\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\010\001\027\001\028\001\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\026\001\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\034\001\013\001\014\001\
\015\001\016\001\001\001\052\001\019\001\004\001\049\001\050\001\
\051\001\052\001\038\001\039\001\040\001\098\000\042\001\052\001\
\002\001\002\001\001\001\047\001\048\001\007\001\003\001\001\001\
\010\001\010\001\004\001\026\001\011\001\038\001\039\001\040\001\
\052\001\042\001\011\001\104\000\035\001\036\001\037\001\107\000\
\001\001\109\000\110\000\001\001\043\001\044\001\045\001\046\001\
\026\001\001\001\049\001\050\001\051\001\052\001\049\000\050\000\
\124\000\035\001\036\001\037\001\001\001\001\001\001\001\004\001\
\052\001\043\001\044\001\045\001\046\001\001\001\001\001\049\001\
\050\001\051\001\052\001\002\001\002\001\010\001\015\001\016\001\
\007\001\001\001\019\001\010\001\004\001\026\001\002\001\010\001\
\002\001\002\001\019\001\003\001\003\001\003\001\035\001\036\001\
\037\001\052\001\007\001\007\001\027\001\028\001\043\001\044\001\
\045\001\046\001\026\001\007\001\049\001\050\001\051\001\052\001\
\007\001\032\001\003\001\035\001\036\001\037\001\001\001\000\000\
\002\001\004\001\002\001\043\001\044\001\045\001\046\001\002\001\
\002\001\049\001\050\001\051\001\052\001\002\001\255\255\255\255\
\255\255\255\255\007\001\001\001\255\255\010\001\004\001\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\027\001\028\001\
\043\001\044\001\045\001\046\001\026\001\255\255\049\001\050\001\
\051\001\052\001\255\255\255\255\002\001\035\001\036\001\037\001\
\001\001\007\001\255\255\004\001\010\001\043\001\044\001\045\001\
\046\001\255\255\255\255\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\046\001\255\255\002\001\
\049\001\050\001\051\001\052\001\007\001\255\255\255\255\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\002\001\
\027\001\028\001\255\255\255\255\007\001\255\255\255\255\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\002\001\
\027\001\028\001\255\255\255\255\007\001\255\255\255\255\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\255\255\002\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\002\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\002\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\002\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\002\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\002\001\
\027\001\028\001\255\255\255\255\007\001\255\255\255\255\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\002\001\
\027\001\028\001\255\255\255\255\007\001\255\255\255\255\010\001\
\002\001\255\255\013\001\014\001\255\255\007\001\255\255\255\255\
\010\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\020\001\021\001\022\001\023\001\024\001\025\001\
\002\001\027\001\028\001\255\255\255\255\007\001\255\255\255\255\
\010\001\002\001\255\255\255\255\255\255\255\255\007\001\255\255\
\255\255\010\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\020\001\021\001\022\001\023\001\024\001\
\025\001\002\001\027\001\028\001\255\255\255\255\007\001\255\255\
\255\255\010\001\002\001\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\010\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\020\001\021\001\022\001\023\001\
\024\001\025\001\002\001\027\001\028\001\255\255\255\255\007\001\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\007\001\027\001\028\001\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\007\001\027\001\028\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\007\001\027\001\028\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMI\000\
  COLON\000\
  GET\000\
  COMMA\000\
  ASSIGN\000\
  AT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PERCENT\000\
  EXP\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  BREAK\000\
  CONTINUE\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  FUNCTION\000\
  RETURN\000\
  WHILE\000\
  IF\000\
  INT\000\
  VOID\000\
  BOOL\000\
  CHAR\000\
  STRING\000\
  PRINT\000\
  GOTO\000\
  LIST\000\
  CHOOSE\000\
  MAIN\000\
  NODE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LIT\000\
  BOOL_LIT\000\
  STR_LIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
               ( [], [], [] )
# 433 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 34 "parser.mly"
                ( let (var, func, node) = _1 in _2::var, func, node )
# 441 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 35 "parser.mly"
                ( let (var, func, node) = _1 in var, _2::func, node )
# 449 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ndecl) in
    Obj.repr(
# 36 "parser.mly"
                ( let (var, func, node) = _1 in var, func, _2::node )
# 457 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'mytypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'params_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 40 "parser.mly"
 ({
    ftype = _1;
		fname = _3;
		params = _5;
		body = List.rev _8
		})
# 472 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
  ({
    nname = _2;
    body = List.rev _4
    })
# 483 "parser.ml"
               : 'ndecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 53 "parser.mly"
                                ({
    nname = "main";
    body = List.rev _3
    })
# 493 "parser.ml"
               : 'ndecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mytypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                              ({ vtype = _1;
          vname = _2;
          vexpr = _4 })
# 504 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
      (Int)
# 510 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         (Bool)
# 516 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
           (String)
# 522 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
         (Void)
# 528 "parser.ml"
               : 'mytypes))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                    ( [] )
# 534 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 72 "parser.mly"
                   ( List.rev _1 )
# 541 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mytypes) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                                 ( [Param(_1, _2)])
# 549 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mytypes) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                                  ( Param(_3,_4)::_1 )
# 558 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                     ( [] )
# 564 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                    ( _2 :: _1 )
# 572 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
            (Expr(_1))
# 579 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                 ( Print(_3) )
# 586 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_opt) in
    Obj.repr(
# 86 "parser.mly"
                                       ( List(_3) )
# 593 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_opt) in
    Obj.repr(
# 87 "parser.mly"
                                         ( Choose(_3) )
# 600 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                 ( Goto(_3) )
# 607 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "parser.mly"
                                                  ( If(_3, _6, []))
# 615 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 90 "parser.mly"
                                                                              ( If(_3, _6, _10))
# 624 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
                                                    ( While(_3, _6) )
# 632 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                    ( Return(_2) )
# 639 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 95 "parser.mly"
                    ( Int_Lit(_1) )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 96 "parser.mly"
                       ( Bool_Lit(_1) )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
                    ( String_Lit(_1) )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                      ( Id(_1) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                  ( Uniop(Not, _2) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                      ( Binop(_1, Add,   _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                      ( Binop(_1, Sub,   _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                      ( Binop(_1, Mult,  _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                      ( Binop(_1, Div,   _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                      ( Binop(_1, Mod,   _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                      ( Binop(_1, Equal, _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                      ( Binop(_1, Neq,   _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                      ( Binop(_1, Less,  _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                      ( Binop(_1, Leq,   _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                      ( Binop(_1, Greater,  _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                      ( Binop(_1, Geq,   _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                       ( Binop(_1, And,   _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                      ( Binop(_1, Or,   _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                      ( Assign(_1, _3) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 114 "parser.mly"
                                  ( Call(_1, _3) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                        ( _2 )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                  ( [] )
# 807 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 119 "parser.mly"
                   ( List.rev _1 )
# 814 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
         ( [_1] )
# 821 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                              ( _3 :: _1 )
# 829 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
